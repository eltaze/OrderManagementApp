To integrate the provided backend ASP.NET Core API with an Angular frontend, you need to follow a few structured steps. These steps will guide you on setting up your **ASP.NET Core API** to handle the CRUD operations and authentication, then use **Angular** to interact with it. Let's break it down step-by-step:

### **Step 1: Setup Your Backend (ASP.NET Core API)**

You already have the backend implemented with controllers for `Invoice`, `InvoiceDetails`, `Product`, and `User`. Let’s walk through the steps of making sure everything is connected properly.

1. **Install Necessary NuGet Packages:**
   - `Microsoft.AspNetCore.Cors`: To allow CORS.
   - `Microsoft.AspNetCore.Authentication.JwtBearer`: To handle JWT authentication.
   - `Microsoft.EntityFrameworkCore`: For database interaction.

2. **Enable CORS** in your `Startup.cs` or `Program.cs` file:
   
   In `Startup.cs` or `Program.cs`, configure CORS to allow requests from your Angular frontend.

   ```csharp
   public void ConfigureServices(IServiceCollection services)
   {
       services.AddCors(options =>
       {
           options.AddPolicy("AllowAllOrigins", builder =>
               builder.AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader());
       });

       // Add other services here (like controllers, database context, etc.)
   }
   
   public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
   {
       app.UseCors("AllowAllOrigins");

       // Other middleware configurations...
   }
   ```

3. **Configure Authentication** (JWT token):
   
   In `Startup.cs` or `Program.cs`, configure JWT authentication to secure your endpoints.

   ```csharp
   public void ConfigureServices(IServiceCollection services)
   {
       services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
           .AddJwtBearer(options =>
           {
               options.RequireHttpsMetadata = false;
               options.SaveToken = true;
               options.TokenValidationParameters = new TokenValidationParameters
               {
                   ValidateIssuer = false,
                   ValidateAudience = false,
                   ValidateLifetime = true,
                   IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes("MySecretKeyIsSecretsoDon'tTellAnyOnePlease"))
               };
           });

       services.AddControllers();
   }
   ```

4. **Enable Authorization** for the endpoints:
   
   In each of your controllers, ensure that you are using `[Authorize]` to restrict access to authenticated users:

   ```csharp
   [Authorize]
   [Route("api/[controller]")]
   [ApiController]
   public class ProductController : ControllerBase
   {
       private readonly IProductBL _productBL;

       public ProductController(IProductBL productBL)
       {
           _productBL = productBL;
       }

       [HttpGet]
       public async Task<ActionResult<List<ProductsUI>>> GetAll()
       {
           var result = await _productBL.All();
           if (result == null) return BadRequest();
           return Ok(result);
       }

       // Other CRUD actions...
   }
   ```

5. **Generate Tokens for Authentication:**
   
   The `UserController` handles login and user registration. The `GenrateToek` method generates a JWT token for users. Ensure that your Angular app sends the token with each request to access protected routes.

---

### **Step 2: Set Up Your Angular Frontend**

1. **Install Angular Dependencies:**
   
   In your Angular project, make sure you install necessary dependencies such as Angular's HTTP Client for making API requests.

   ```bash
   ng add @angular/material
   npm install @angular/forms @angular/http @angular/cdk @angular/animations
   ```

2. **Create Authentication Service** in Angular:

   The `AuthService` will manage login, registration, and token storage. It will also handle making authorized HTTP requests by attaching the JWT token in the headers.

   **auth.service.ts:**

   ```typescript
   import { Injectable } from '@angular/core';
   import { HttpClient, HttpHeaders } from '@angular/common/http';
   import { Observable } from 'rxjs';

   @Injectable({
     providedIn: 'root'
   })
   export class AuthService {
     private apiUrl = 'https://localhost:5001/api/user';

     constructor(private http: HttpClient) {}

     login(username: string, password: string): Observable<any> {
       return this.http.post(`${this.apiUrl}`, { username, password });
     }

     register(username: string, password: string): Observable<any> {
       return this.http.post(`${this.apiUrl}/Register`, { username, password });
     }

     saveToken(token: string): void {
       localStorage.setItem('access_token', token);
     }

     getToken(): string | null {
       return localStorage.getItem('access_token');
     }

     isAuthenticated(): boolean {
       return this.getToken() != null;
     }

     logout(): void {
       localStorage.removeItem('access_token');
     }

     getHeaders() {
       return new HttpHeaders({
         'Authorization': `Bearer ${this.getToken()}`
       });
     }
   }
   ```

3. **Create Angular Services for CRUD operations:**

   You need services to interact with your ASP.NET Core API, for example for `Invoice`, `Product`, etc.

   **invoice.service.ts:**

   ```typescript
   import { Injectable } from '@angular/core';
   import { HttpClient } from '@angular/common/http';
   import { Observable } from 'rxjs';
   import { AuthService } from './auth.service';

   @Injectable({
     providedIn: 'root'
   })
   export class InvoiceService {
     private apiUrl = 'https://localhost:5001/api/invoice';

     constructor(private http: HttpClient, private authService: AuthService) {}

     getInvoices(): Observable<any[]> {
       return this.http.get<any[]>(this.apiUrl, { headers: this.authService.getHeaders() });
     }

     createInvoice(invoice: any): Observable<any> {
       return this.http.post(this.apiUrl, invoice, { headers: this.authService.getHeaders() });
     }

     updateInvoice(invoice: any): Observable<any> {
       return this.http.put(this.apiUrl, invoice, { headers: this.authService.getHeaders() });
     }

     deleteInvoice(id: number): Observable<any> {
       return this.http.delete(`${this.apiUrl}?id=${id}`, { headers: this.authService.getHeaders() });
     }
   }
   ```

4. **Create Login Component and Handle User Authentication:**

   Create a login form where users can enter credentials to authenticate and retrieve a JWT token.

   **login.component.ts:**

   ```typescript
   import { Component } from '@angular/core';
   import { AuthService } from './auth.service';
   import { Router } from '@angular/router';

   @Component({
     selector: 'app-login',
     templateUrl: './login.component.html',
   })
   export class LoginComponent {
     username: string = '';
     password: string = '';

     constructor(private authService: AuthService, private router: Router) {}

     onLogin() {
       this.authService.login(this.username, this.password).subscribe(response => {
         if (response && response.access_Token) {
           this.authService.saveToken(response.access_Token);
           this.router.navigate(['/home']);
         }
       }, error => {
         console.error('Login failed:', error);
       });
     }
   }
   ```

   **login.component.html:**

   ```html
   <form (submit)="onLogin()">
     <input type="text" [(ngModel)]="username" placeholder="Username" required />
     <input type="password" [(ngModel)]="password" placeholder="Password" required />
     <button type="submit">Login</button>
   </form>
   ```

5. **Protect Routes with Angular Guards:**

   Use an Angular guard to protect routes that require authentication, such as the home page or invoice creation.

   **auth.guard.ts:**

   ```typescript
   import { Injectable } from '@angular/core';
   import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';
   import { AuthService } from './auth.service';

   @Injectable({
     providedIn: 'root',
   })
   export class AuthGuard implements CanActivate {
     constructor(private authService: AuthService, private router: Router) {}

     canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {
       if (this.authService.isAuthenticated()) {
         return true;
       } else {
         this.router.navigate(['/login']);
         return false;
       }
     }
   }
   ```

---

### **Step 3: Connect Angular to ASP.NET Core API**

- **In Angular**, ensure the HTTP requests are properly authenticated by adding the `Authorization` header in the service requests (as shown in the `InvoiceService`).
- **In ASP.NET Core**, ensure the JWT middleware is correctly configured to authenticate requests.

### **Step 4: Run and Test the Application**

1. **Run the ASP.NET Core API** using Visual Studio or `dotnet run` and ensure that the endpoints are accessible.
2. **Run the Angular frontend** using `ng serve` and test if the login and CRUD operations work by making authenticated API requests.

### **Step 5: Debug and Deploy**

- Ensure all JWT tokens are handled securely, especially during deployment (for example, using `HTTPS`).
- You can use libraries such as `ngx-auth` in Angular for advanced token handling.


==========================
To integrate **Bootstrap** into your Angular application and update the code accordingly, follow these steps. This will ensure that your components are styled using Bootstrap’s CSS classes.

### **Step 1: Install Bootstrap in Angular**

You need to add Bootstrap to your Angular project.

1. **Install Bootstrap:**

   Run the following command to install Bootstrap:

   ```bash
   npm install bootstrap
   ```

2. **Include Bootstrap CSS:**

   After installing Bootstrap, you need to include its CSS file in your Angular project. Open the `angular.json` file and add the Bootstrap CSS file path to the `styles` array.

   ```json
   "styles": [
     "src/styles.css",
     "node_modules/bootstrap/dist/css/bootstrap.min.css"
   ]
   ```

### **Step 2: Update Components to Use Bootstrap**

Now, we will update your Angular components, especially forms, buttons, and modals, to use Bootstrap classes for a responsive and styled UI.

#### **1. Update Login Component to Use Bootstrap**

**login.component.ts:**
```typescript
import { Component } from '@angular/core';
import { AuthService } from './auth.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent {
  username: string = '';
  password: string = '';

  constructor(private authService: AuthService, private router: Router) {}

  onLogin() {
    this.authService.login(this.username, this.password).subscribe(response => {
      if (response && response.access_Token) {
        this.authService.saveToken(response.access_Token);
        this.router.navigate(['/home']);
      }
    }, error => {
      console.error('Login failed:', error);
    });
  }
}
```

**login.component.html:**
```html
<div class="container">
  <div class="row justify-content-center">
    <div class="col-md-6">
      <div class="card mt-5">
        <div class="card-body">
          <h3 class="card-title text-center">Login</h3>
          <form (submit)="onLogin()">
            <div class="mb-3">
              <label for="username" class="form-label">Username</label>
              <input type="text" id="username" class="form-control" [(ngModel)]="username" placeholder="Enter username" required />
            </div>
            <div class="mb-3">
              <label for="password" class="form-label">Password</label>
              <input type="password" id="password" class="form-control" [(ngModel)]="password" placeholder="Enter password" required />
            </div>
            <button type="submit" class="btn btn-primary w-100">Login</button>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>
```

### **Step 3: Update Home Page with Bootstrap**

Update the home page where the Kendo Grid is displayed. We'll wrap it with Bootstrap classes for layout and styling.

**home.component.html:**
```html
<div class="container mt-5">
  <div class="row">
    <div class="col-12">
      <h3 class="text-center mb-4">Item Management</h3>
      <button class="btn btn-success mb-3" (click)="openCreateModal()">Add New Item</button>
      
      <!-- Displaying the Kendo Grid here -->
      <kendo-grid [data]="items" [height]="500" [pageSize]="10" (dataStateChange)="onDataStateChange($event)">
        <kendo-grid-column field="itemName" title="Item Name" width="200"></kendo-grid-column>
        <kendo-grid-column field="description" title="Description" width="300"></kendo-grid-column>
        <kendo-grid-column field="price" title="Unit Price" width="100"></kendo-grid-column>
        <kendo-grid-column field="quantity" title="Quantity" width="100"></kendo-grid-column>
        <kendo-grid-column>
          <ng-template kendoGridCellTemplate let-dataItem>
            <button class="btn btn-warning btn-sm" (click)="editItem(dataItem)">Edit</button>
            <button class="btn btn-danger btn-sm" (click)="deleteItem(dataItem.id)">Delete</button>
          </ng-template>
        </kendo-grid-column>
      </kendo-grid>
    </div>
  </div>
</div>
```

Here, I added Bootstrap classes to the container, rows, and columns to center and space elements. Buttons are styled with Bootstrap's `btn`, `btn-primary`, `btn-warning`, and `btn-danger`.

### **Step 4: Update Create/Update Item Modal with Bootstrap**

If you're using modals for creating or updating items, use the Bootstrap modal component to create responsive dialogs.

**item-modal.component.html:**
```html
<div class="modal fade" id="itemModal" tabindex="-1" aria-labelledby="itemModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="itemModalLabel">Create/Update Item</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form (submit)="onSave()">
          <div class="mb-3">
            <label for="itemName" class="form-label">Item Name</label>
            <input type="text" id="itemName" class="form-control" [(ngModel)]="item.name" name="name" required />
          </div>
          <div class="mb-3">
            <label for="description" class="form-label">Description</label>
            <textarea id="description" class="form-control" [(ngModel)]="item.description" name="description"></textarea>
          </div>
          <div class="mb-3">
            <label for="price" class="form-label">Price</label>
            <input type="number" id="price" class="form-control" [(ngModel)]="item.price" name="price" required />
          </div>
          <div class="mb-3">
            <label for="quantity" class="form-label">Quantity</label>
            <input type="number" id="quantity" class="form-control" [(ngModel)]="item.quantity" name="quantity" required />
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button type="submit" class="btn btn-primary">Save</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>
```

Ensure that you have the necessary functionality in the component to manage the modal's visibility and form submission.

### **Step 5: Update Angular App Routing and Auth Guard to Use Bootstrap Layout**

You can structure your components in Bootstrap's responsive grid system. For example, you can use the **Auth Guard** to restrict access to certain routes and ensure that users are redirected to the login page if they aren’t authenticated.

In `app-routing.module.ts`:

```typescript
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { LoginComponent } from './login/login.component';
import { HomeComponent } from './home/home.component';
import { AuthGuard } from './auth.guard';

const routes: Routes = [
  { path: 'login', component: LoginComponent },
  { path: 'home', component: HomeComponent, canActivate: [AuthGuard] },
  { path: '', redirectTo: '/login', pathMatch: 'full' },
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }
```

### **Step 6: Verify Bootstrap Layout for Responsiveness**

Ensure that all components look good on various screen sizes. For example, using the Bootstrap grid system with classes like `col-md-6` for medium screens and `col-12` for mobile will ensure your page is responsive.

### **Final Thoughts:**

- The **login page** is now styled with Bootstrap, including form controls, buttons, and a centered layout.
- The **home page** integrates Bootstrap for managing the item grid and provides a simple, clean UI for creating and managing items.
- A **Bootstrap modal** is added for creating and editing items.
- Ensure you test everything on different screen sizes to ensure the layout is fully responsive.

With these changes, your application will look modern and be responsive, with clean, functional styling provided by Bootstrap!
